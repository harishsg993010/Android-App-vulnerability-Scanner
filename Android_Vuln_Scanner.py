import argparse
import os
import re
import subprocess

def main():
    # Parse the command-line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("apk_file", help="path to the APK file")
    parser.add_argument("output_dir", help="output directory for reversed files")
    args = parser.parse_args()

    # Reverse the APK file using Jadx
    subprocess.run(["jadx", "-d", args.output_dir, args.apk_file])

    # Search for the vulnerabilities in the reversed files
    vulnerabilities = []
    for root, dirs, files in os.walk(args.output_dir):
        for filename in files:
            file_path = os.path.join(root, filename)

            # Search for the "theft of arbitrary files" vulnerability
            with open(file_path, "r") as f:
                for i, line in enumerate(f):
                    if "android:exported=\"true\"" in line and "android:grantUriPermissions=\"true\"" in line:
                        vulnerabilities.append(("Theft of arbitrary files", file_path, i + 1))

            # Search for the "deletion of arbitrary files" vulnerability
            with open(file_path, "r") as f:
                for i, line in enumerate(f):
                    if "android:exported=\"true\"" in line and "android:grantUriPermissions=\"true\"" in line:
                        vulnerabilities.append(("Deletion of arbitrary files", file_path, i + 1))

            # Search for the "ability to start arbitrary components" vulnerability
            with open(file_path, "r") as f:
                for i, line in enumerate(f):
                    if "<category android:name=\"android.intent.category.DEFAULT\"/" in line:
                        vulnerabilities.append(("Ability to start arbitrary components", file_path, i + 1))

            # Search for the "using an implicit intent to send a broadcast" vulnerability
            with open(file_path, "r") as f:
                for i, line in enumerate(f):
                    if re.search(r"context\.sendBroadcast\(intent\)", line) or \
                       re.search(r"sendBroadcast\(i\)", line) or \
                       re.search(r"sendBroadcastasUser\(i,null\)", line) or \
                       re.search(r"sendBroadcastasUser\(i,null,null\)", line) or \
                       re.search(r"sendOrderedBroadcast\(i,null\)", line) or \
                       re.search(r"sendOrderedBroadcastAsUser", line) or \
                       re.search(r"intent\.putExtra", line):
                        vulnerabilities.append(("Using an implicit intent to send a broadcast", file_path, i + 1))
            

            # Search for the "storing sensitive information on an SD card" vulnerability
            with open(file_path, "r") as f:
                for i, line in enumerate(f):
                    if "android.os.Environment.getExternalStorageDirectory()" in line or \
                       "java.io.FileOutputStream(file)" in line or \
                       "getExternalCacheDirs()" in line or \
                       "getExternalCacheDir()" in line or \
                       "getExternalFilesDir(Environment.DIRECTORY_PICTURES)" in line or \
                       "getExternalFilesDirs(Environment.DIRECTORY_MUSIC)" in line or \
                       "getExternalMediaDirs()" in line or \
                       "Environment.getExternalStorageDirectory()" in line or \
                       "Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES)" in line:
                        vulnerabilities.append(("Storing sensitive information on an SD card", file_path, i + 1))

            # Search for the "insecure activity start" vulnerability
            with open(file_path, "r") as f:
                for i, line in enumerate(f):
                    if "return intent" in line or \
                       "intent.toUri(1)" in line or \
                       "android:path=\"/apps/launch" in line or \
                       "startActivity(i)" in line:
                        vulnerabilities.append(("Insecure activity start", file_path, i + 1))

            # Search for the "reading or editing arbitrary data from Shared Preference" vulnerability
            with open(file_path, "r") as f:
                for i, line in enumerate(f):
                    if "android:exported=\"true\"" in line and "android:grantUriPermissions=\"true\"" in line:
                        vulnerabilities.append(("Reading or editing arbitrary data from Shared Preference", file_path, i + 1))

            # Search for the "permission with 'normal' protection level" vulnerability
            with open(file_path, "r") as f:
                for i, line in enumerate(f):
                    if "android:permission=\"Normal\"" in line:
                        vulnerabilities.append(("Permission with 'normal' protection level", file_path, i + 1))

            # Search for the "use of insecure HTTP protocol" vulnerability
            with open(file_path, "r") as f:
                for i, line in enumerate(f):
                    if "http://" in line:
                        vulnerabilities.append(("Use of insecure HTTP protocol", file_path, i + 1))

            # Search for the "use of Random class instead of SecureRandom" vulnerability
            with open(file_path, "r") as f:
                for i, line in enumerate(f):
                    if "java.util.Random" in line:
                        vulnerabilities.append(("Use of Random class instead of SecureRandom", file_path, i + 1))

            # Search for the "arbitrary code execution" vulnerability
            with open(file_path, "r") as f:
                for i, line in enumerate(f):
                    if "getClassLoader().loadClass" in line:
                        vulnerabilities.append(("Arbitrary code execution", file_path, i + 1))

            # Search for the "loading an arbitrary class" vulnerability
            with open(file_path, "r") as f:
                for i, line in enumerate(f):
                    if "Class.forName(parcel.readString())" in line:
                        vulnerabilities.append(("Loading an arbitrary class", file_path, i + 1))

            # Search for the "createFromParcel(android.os.Parcel parcel)" vulnerability
            with open(file_path, "r") as f:
                for i, line in enumerate(f):
                    if "createFromParcel(android.os.Parcel parcel)" in line:
                        vulnerabilities.append(("createFromParcel(android.os.Parcel parcel)", file_path, i + 1))

            # Search for the "enabled JavaScript" vulnerability
            with open(file_path, "r") as f:
                for i, line in enumerate(f):
                    if "webView.getSettings().setJavaScriptEnabled(true" in line:
                        vulnerabilities.append(("Enabled JavaScript", file_path, i + 1))

            # Search for the "file access from file URLs is enabled for WebView" vulnerability
            with open(file_path, "r") as f:
                for i, line in enumerate(f):
                    if "webView.getSettings().setAllowFileAccessFromFileURLs(true" in line:
                        vulnerabilities.append(("File access from file URLs is enabled for WebView", file_path, i + 1))

            # Search for the "use of bypassable host check" vulnerability
            with open(file_path, "r") as f:
                for i, line in enumerate(f):
                    if "android:host" in line:
                        vulnerabilities.append(("Use of bypassable host check", file_path, i + 1))

            # Search for the "injection of arbitrary HTML code" vulnerability
            with open(file_path, "r") as f:
                for i, line in enumerate(f):
                    if "android.text.Html.fromHtml" in line:
                        vulnerabilities.append(("Injection of arbitrary HTML code", file_path, i + 1))


            # Search for the "content access is enabled for WebView" vulnerability
            with open(file_path, "r") as f:
                for i, line in enumerate(f):
                    if "loadUrl(\"file://" in line:
                        vulnerabilities.append(("Content access is enabled for WebView", file_path, i + 1))

            # Search for the "allow debuggable" vulnerability
            with open(file_path, "r") as f:
                for i, line in enumerate(f):
                    if "android:debuggable=\"true\"" in line:
                        vulnerabilities.append(("Allow debuggable", file_path, i + 1))

            # Search for the "logging on Android < 4.1" vulnerability
            with open(file_path, "r") as f:
                for i, line in enumerate(f):
                    if "android.util.Log" in line:
                        vulnerabilities.append(("Logging on Android < 4.1", file_path, i + 1))


            # Search for the "XSS" vulnerability
            with open(file_path, "r") as f:
                for i, line in enumerate(f):
                    if "WebView.loadDataWithBaseURL" in line:
                        vulnerabilities.append(("XSS", file_path, i + 1))

            # Search for the "possibility to install third-party applications" vulnerability
            with open(file_path, "r") as f:
                for i, line in enumerate(f):
                    if "packagemanager" in line:
                        vulnerabilities.append(("Possibility to install third-party applications", file_path, i + 1))

            # Search for the "call to arbirary numbers!" vulnerability
            with open(file_path, "r") as f:
                for i, line in enumerate(f):
                    if "android.action.CALL_PHONE" in line:
                        vulnerabilities.append(("Call to arbirary numbers!", file_path, i + 1))

    # Print the results
    for vulnerability in vulnerabilities:
        name, file_path, line_number = vulnerability
        print(f"{name}: {file_path}:{line_number}")

if __name__ == "__main__":
    main()




    
